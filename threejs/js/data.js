var Surf = Surf || {};

Surf.Data = function(){
  this.data = '+616,793,611,949+647,-191,-378,-1006+663,-192,-402,-1011+677,-136,-380,-998+692,-208,-452,-1020+708,-175,-388,-1009+722,-155,-402,-1046+739,-188,-421,-1017+753,-171,-417,-1030+770,-217,-388,-1033+784,-227,-398,-1020+800,-199,-343,-998+815,-190,-401,-1020+831,346,472,1613+845,-711,-444,-940+862,-242,-408,-986+876,-212,-409,-1059+890,-137,-422,-1031+907,-158,-386,-973+921,-235,-364,-981+937,-261,-407,-1045+952,-317,-408,-1090+968,42,-359,-927+983,152,-360,-915+999,-639,-283,-797+1013,-893,-442,-1297+1038,-1131,-1488,-1302+1052,116,-1713,-1103+1069,628,-2162,-1168+1083,541,-1824,-1694+1099,-426,-1850,-1881+1116,-777,-1447,-1294+1130,-205,-731,408+1146,975,-262,1197+1161,1100,-1641,1458+1177,548,-2300,1142+1191,-1394,-2183,381+1208,-2798,-1216,594+1224,-2829,-805,872+1239,-780,134,1529+1255,392,248,2958+1269,1098,-26,3245+1286,312,-1282,3555+1302,-429,-1767,3574+1318,-1601,-1624,3270+1335,-2023,-156,2475+1351,-2614,1001,1178+1368,-2786,1269,286+1386,-3223,1654,-290+1402,-3934,1482,-392+1427,-5096,415,-424+1445,-5034,909,-2439+1464,-4649,2278,-2905+1480,-3866,2455,-1939+1497,-2659,1789,-937+1513,-1247,677,1078+1529,-620,-765,2469+1548,-717,37,2376+1562,-2421,389,1490+1579,-3557,641,583+1593,-3210,-1704,1457+1609,-1228,-2089,710+1624,-118,-1316,-4647+1640,75,-1104,-377+1654,75,524,1206+1669,-5292,-491,347+1685,-5347,207,768+1699,-1494,2040,-880+1716,327,3034,-1530+1730,3113,3530,-686+1746,2947,2742,-370+1761,1188,1989,-700+1777,-1716,1772,-1715+1792,-1966,1611,-1996+1812,-735,2856,-1703+1828,-541,3510,-585+1843,-1621,3579,448+1859,-1844,1946,2323+1873,-2273,1479,2493+1890,-2777,189,1370+1904,-2950,612,26+1918,-2773,1586,482+1935,-1426,4047,484+1949,-1155,4854,251+1966,-1654,4647,18+1980,-2198,3028,219+1996,-2490,2666,254+2011,-2678,-59,-229+2027,-2639,-727,-1660+2041,-2425,447,-931+2058,-3981,3951,-1600+2072,-4275,5192,-3577+2088,-2471,6631,-4141+2103,-1249,2115,-2874+2119,-568,-939,-819+2134,247,-4582,-867+2150,792,-1364,392+2170,-3168,2873,-118+2185,-3616,4566,-64+2201,-1984,5639,-3036+2215,-1544,3942,-1945+2232,-2028,2406,-1417+2246,-3833,-596,-1173+2263,-3827,-395,-1510+2277,-4818,2678,-3195+2293,-7209,5732,-7316+2310,-7122,3538,-5284+2324,-1956,2879,-887+2340,274,2023,4166+2355,1071,2415,5746+2371,1275,3249,1748+2385,1910,5209,-5631+2402,863,8752,-8437+2416,366,8212,-7693+2430,896,5433,1163+2447,4771,-2812,6367+2461,4174,-201,8278+2478,-657,3067,2005+2492,-2551,1573,-9725+2508,2097,-966,-1558+2523,8580,-4639,3819+2543,6663,-4112,11391+2560,6367,-3697,13114+2574,7793,-4621,8833+2590,11440,-3655,5747+2605,14905,-3313,1373+2621,16243,-1692,785+2637,17106,-934,1908+2652,15240,-376,4817+2668,13590,-1606,3014+2682,12123,-2712,1501+2699,9188,-233,-3405+2713,8936,2906,-5428+2729,8697,5107,-7837+2744,9721,5775,-6473+2760,9918,6570,-4715+2775,4841,6757,-3832+2791,3290,7354,-3830+2805,4156,7891,-2756+2822,5168,7968,-2132+2836,6243,7749,-79+2852,7252,6063,1000+2867,4059,4324,1208+2883,3089,3229,1897+2902,4740,1275,6124+2918,6760,-1389,8724+2932,9028,-2508,11359+2949,9513,-959,11754+2965,2217,942,8062+2979,-2560,-373,2501+2994,-1017,-176,2813+3010,7348,-2312,4734+3026,7815,-5172,4259+3041,5113,-9138,4144+3057,3354,-9977,667+3072,2495,-9280,-1322+3088,2052,-7339,-4556+3102,3701,-10399,-2832+3119,7128,-11131,-234+3133,5003,-11230,3425+3149,2088,-11598,4259+3164,-2254,-11688,4067+3180,-1219,-6498,1922+3196,183,-2397,-1034+3211,1875,5855,-1875+3227,471,7428,-762+3241,-149,5017,1337+3262,-985,-212,2887+3276,-1245,-1482,3483+3293,670,2210,1412+3307,218,2827,-65+3323,1856,3059,733+3338,3094,2421,5291+3354,1810,5323,6196+3368,1531,4994,390+3383,1931,4885,-6327+3399,2038,1690,-8693+3416,-1282,-5726,-12336+3430,-2957,-8413,-16769+3446,-3770,-11913,-22355+3461,-3856,-13290,-32768+3477,-3157,-15450,-32768+3493,-603,-21420,-32745+3508,-5233,-26319,-32768+3524,-6564,-26135,-32768+3540,-6224,-20869,-32768+3555,1371,-14515,-32768+3571,1695,-15920,-32768+3588,1971,-18660,-30580+3608,-1481,-18869,-23896+3622,-6623,-21969,-15781+3639,-5144,-24226,-7373+3655,1721,-20042,-2587+3670,3790,-6883,4595+3686,3574,-305,9806+3700,3986,7341,14177+3717,7277,9045,21467+3731,7810,10639,23066+3747,9693,16529,23760+3762,9734,19943,24152+3778,8413,19876,25879+3794,6023,17276,28405+3809,4394,15686,28608+3825,3974,13573,28275+3840,3010,14035,25563+3856,2632,15323,23249+3870,3258,17235,22568+3887,1865,16465,20381+3903,1335,15152,20217+3917,-303,13827,20037+3934,-127,11058,19508+3954,835,9073,19447+3969,-556,7467,18847+3985,50,5397,20061+3999,-1883,4334,20240+4016,-2881,4219,20429+4030,-692,4872,21182+4046,-16,9370,18745+4061,-3372,10862,16834+4077,-2663,12992,16965+4091,-1367,13834,16280+4108,-849,12340,16195+4122,961,12454,14477+4139,202,12824,10281+4153,-1840,13839,8822+4169,-2372,14576,5844+4186,-1978,13783,4629+4200,-1048,11730,3719+4216,-175,9383,3299+4231,-37,9510,3988+4247,-1318,9564,4292+4261,-1147,9105,3894+4278,-1859,6709,3612+4292,-5125,5647,-1461+4313,-3317,2918,-5988+4329,-1795,1253,-9488+4343,-1451,1051,-11909+4360,-3298,2160,-14119+4374,-3530,1634,-11167+4390,-3328,1426,-9676+4405,378,-1763,-7006+4421,1244,-1524,-8078+4438,711,-2758,-11426+4452,1776,-4960,-15457+4468,229,-7288,-16478+4483,-981,-10474,-16612+4499,-815,-11423,-16569+4513,-716,-10263,-17129+4530,-2206,-5230,-22239+4546,-132,-2626,-25236+4560,3389,-4181,-25754+4577,2971,-12706,-24131+4593,2556,-17212,-18145+4608,-2310,-22071,-15066+4624,-10054,-15940,-24090+4644,-1979,1398,-31740+4661,13229,6047,-32192+4675,14954,468,-28517+4691,5223,-13768,-23482+4706,-1020,-16736,-21835+4722,-3372,-11993,-27576+4739,7001,-129,-31740+4753,13069,-1428,-32766+4769,10078,-6301,-32014+4786,9410,-14795,-25253+4800,9208,-9639,-19793+4816,10927,-6624,-20256+4831,15592,3970,-17360+4847,17524,6882,-9519+4864,23086,6078,-2877+4878,23132,7084,10901+4894,23517,10687,14570+4909,24588,19265,15207+4925,27166,24610,18516+4941,27512,26549,25805+4956,26712,25054,28886+4976,17876,22979,32703+4993,11949,19176,32704+5007,9811,14104,32704+5023,3004,10471,32704+5038,960,7950,32704+5054,-25,7978,32704+5068,-756,12923,32704+5085,-7298,29140,32704+5099,-16901,32679,31008+5115,-31827,32715,20324+5132,-31572,18030,8053+5146,-27049,5634,1326+5163,-22352,3774,-9793+5179,-23404,17194,-12443+5193,-24264,22439,-12325+5210,-27709,22724,-14981+5226,-24451,7685,-21156+5240,-23724,-2836,-24669+5257,-24180,-18592,-29876+5273,-24574,-14897,-32766+5287,-25367,-8478,-32768+5308,-22941,-2528,-32768+5324,-9079,-11243,-32768+5341,-1435,-17193,-32768+5355,851,-15889,-32768+5371,8641,310,-32768+5386,18546,5706,-31756+5402,19085,51,-23151+5419,28200,-1803,-18821+5433,32752,10940,-13425+5449,32752,17103,-7662+5464,32752,20906,7347+5480,32752,12772,16709+5496,32752,8189,19112+5511,32752,6675,20848+5527,32752,13424,16872+5541,32752,16862,14257+5558,32752,20371,8245+5574,32358,21200,-382+5588,27803,15885,-4822+5605,30814,7153,-7539+5619,32686,1212,-7231+5636,31523,-3837,-6967+5656,23605,-5334,-7699+5670,20052,-4518,-6141+5687,19556,-3678,-7518+5703,20367,-4093,-8410+5718,22187,-2607,-7476+5734,21368,-1933,-7489+5748,17835,-4307,-6898+5765,18686,-11175,-7702+5781,16848,-10201,-8063+5795,14433,-9836,-9243+5812,19658,-10239,-9522+5826,20782,-7037,-10342+5842,17964,-410,-12548+5859,8933,1868,-12538+5873,11938,1941,-11969+5890,16670,-2333,-11975+5904,16064,-627,-9887+5920,14573,77,-7907+5935,12798,0,-8012+5951,11046,-230,-11131+5965,10594,1178,-12472+5986,10929,4448,-12608+6002,12072,3414,-11243+6019,11762,324,-8600+6033,9975,-970,-8306+6049,8421,-898,-9331+6064,7151,3223,-13106+6080,5182,6040,-11795+6094,5909,4457,-9405+6111,8019,3790,-6742+6125,8396,3883,-6769+6141,8322,2669,-5924+6156,10961,2703,-6099+6172,10267,2403,-6004+6187,8275,1304,-6435+6203,7331,997,-6136+6217,7713,1309,-5292+6234,11708,1237,-8821+6250,13575,640,-6429+6264,13128,-524,-6237+6281,11354,-2878,-7263+6295,3693,-7534,-8045+6311,-4349,-9505,-9133+6326,-3381,-8102,-10925+6375,4797,-314,-5655+6391,4678,-1080,-6576+6406,4820,-3180,-5624+6422,4719,-3754,-4850+6436,4608,-3686,-6307+6453,6213,-2434,-8813+6467,8333,323,-5724+6483,12485,4223,-3997';
  this.coordinates = [];
  this.parseData(this.data);
};

Surf.Data.prototype.parseData = function(data) {
  var rows = data.split('+');
  var prevTime = 0;
  var prevLoc = new THREE.Vector3(0, 0, 0);
  this.coordinates = [];
  for(var i = 1; i < rows.length; i++){
    var c = new Surf.Coordinate();
    var vals = rows[i].split(',');
    var timestamp = parseInt(vals[0], 10);
    var deltaTime = timestamp - prevTime;

    // gyro data
    // var rotX = parseFloat(vals[4]);
    // var rotY = parseFloat(vals[5]);
    // var rotZ = parseFloat(vals[6]);
    // c.quat = new THREE.Quaternion().setFromEuler(new THREE.Euler(rotX, rotY, rotZ));

    var x = parseFloat(vals[1]);
    var y = parseFloat(vals[2]);
    var z = parseFloat(vals[3]);

    c.loc.x = x;
    c.loc.y = y;
    c.loc.z = z;

    c.locDiff.x = x + prevLoc.x;
    c.locDiff.y = y + prevLoc.y;
    c.locDiff.z = z + prevLoc.z;

    //console.log(rows[i] + ' : ' + timestamp, x, y, z);

    // // accelerometer data
    // c.force = {};
    // c.force.x = parseInt(vals[1], 10) / deltaTime;
    // c.force.z = parseInt(vals[2], 10) / deltaTime;
    // c.force.y = parseInt((parseInt(vals[3], 10)/ deltaTime), 10);

    // // calculate position
    // c.accel = c.force;
    // c.vel.add(c.accel);
    // c.loc.add(c.vel);

    this.coordinates.push(c);

    prevLoc = c.loc;
    prevTime = timestamp;
  }
};



// Surf.Data.prototype.parseData = function(data) {
//   var rows = data.split('+');
//   var prevTime = 0;
//   this.coordinates = [];
//   for(var i = 0; i < rows.length; i++){
//     var c = new Surf.Coordinate();
//     var vals = rows[i].split(',');
//     var timestamp = parseInt(vals[7], 10);
//     var deltaTime = timestamp - prevTime;

//     // gyro data
//     var rotX = parseFloat(vals[4]);
//     var rotY = parseFloat(vals[5]);
//     var rotZ = parseFloat(vals[6]);
//     c.quat = new THREE.Quaternion().setFromEuler(new THREE.Euler(rotX, rotY, rotZ));

//     // accelerometer data
//     c.force = {};
//     c.force.x = parseInt(vals[1], 10) / deltaTime;
//     c.force.z = parseInt(vals[2], 10) / deltaTime;
//     c.force.y = parseInt((parseInt(vals[3], 10)/ deltaTime), 10);

//     // calculate position
//     c.accel = c.force;
//     c.vel.add(c.accel);
//     c.loc.add(c.vel);

//     this.coordinates.push(c);

//     prevLoc = c.loc;
//     prevTime = timestamp;
//   }
// };

